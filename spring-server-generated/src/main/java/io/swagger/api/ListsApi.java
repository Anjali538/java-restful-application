/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ListItem;
import org.threeten.bp.LocalDate;
import io.swagger.model.RMSList;
import io.swagger.model.RMSListDetails;
import io.swagger.model.StandardError;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-02-02T10:28:28.762Z[GMT]")
@Api(value = "lists", description = "the lists API")
public interface ListsApi {

    @ApiOperation(value = "Find RMS List data by list-id.", nickname = "getListById", notes = "Find the data information for a specific list, identified by its list-id.", response = RMSList.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = RMSList.class),
        @ApiResponse(code = 400, message = "An unexpected error occured.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Not authenticated.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Access token does not have the required scope.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Page Not Found.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Internal Server Error.", response = StandardError.class, responseContainer = "List") })
    @RequestMapping(value = "/lists/{list-id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RMSList> getListById(@ApiParam(value = "Unique Id to identify the RMS list data.",required=true) @PathVariable("list-id") String listId);


    @ApiOperation(value = "Finds all RMS lists details.", nickname = "getRMSListDetails", notes = "Find the list of all reference lists present in MDM.", response = RMSListDetails.class, responseContainer = "List", authorizations = {
        @Authorization(value = "OAuth2")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List Records successfully retrieved.", response = RMSListDetails.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "An unexpected error occured.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Not authenticated.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Access token does not have the required scope.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Page Not Found.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Internal Server Error.", response = StandardError.class, responseContainer = "List") })
    @RequestMapping(value = "/lists",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<RMSListDetails>> getRMSListDetails(@ApiParam(value = "time stamp when List is modified in MDM.") @Valid @RequestParam(value = "ModifiedTime", required = false) String modifiedTime);


    @ApiOperation(value = "Find RMS Terms Details by Term-id.", nickname = "getTermById", notes = "Find the information for a specific term, identified by its term-id.", response = ListItem.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ListItem.class),
        @ApiResponse(code = 400, message = "An unexpected error occured.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Not authenticated.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Access token does not have the required scope.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Page Not Found.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Internal Server Error.", response = StandardError.class, responseContainer = "List") })
    @RequestMapping(value = "/lists/{list-id}/terms/{term-id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListItem> getTermById(@ApiParam(value = "Unique Id to identify the all terms of a list.",required=true) @PathVariable("list-id") String listId,@ApiParam(value = "Unique Id to identify the particular term of a list.",required=true) @PathVariable("term-id") String termId);


    @ApiOperation(value = "Find RMS Terms", nickname = "getTermsByListId", notes = "Find a list with a collection of its term details.", response = ListItem.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ListItem.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "An unexpected error occured.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Not authenticated.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Access token does not have the required scope.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Page Not Found.", response = StandardError.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Internal Server Error.", response = StandardError.class, responseContainer = "List") })
    @RequestMapping(value = "/lists/{list-id}/terms",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ListItem>> getTermsByListId(@ApiParam(value = "Unique ID to identify the all terms of a list.",required=true) @PathVariable("list-id") String listId);

}
